team:
  private:
    key: SHINHAN_HACKATHON_LSH_LJJ_HDW_GL

spring:
  application:
    name: backend

  config:
    import:
      - classpath:/yml/application-v1.yml
      - classpath:/yml/application-v2.yml
      - classpath:/yml/application-feature.yml
  profiles:
    active : v2, feature

  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: ${DB_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    hikari:
      pool-name: hikari-pool
      maximum-pool-size: 50
      minimum-idle: 50
      connection-timeout: 5000
      connection-init-sql: SELECT 1
      idle-timeout: 600000
      max-lifetime: 1800000
      auto-commit: true

  sql:
    init:
      mode: always

  data:
    redis:
      host: redis
      password: ${REDIS_PASSWORD}
      port: 6379

  rabbitmq:
    host: rabbitmq
    port: 5672
    username: ${RABBITMQ_USER}
    password: ${RABBITMQ_PASSWORD}

    # JPA 설정
  jpa:
    hibernate:
      ddl-auto: create
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
        format_sql: true
        default_batch_fetch_size: 100 #fetch join 후 지연로딩하는 entity을 in 절로 미리 영속성 컨텍스트에 저장

# Log 출력 설정
logging:
  level:
    org:
      springframework:
        security: DEBUG
      hibernate:
        SQL: debug
        type: trace

## 프론트엔드 프로젝트 관련 환경 변수
server:
  front:
    url: j11d209.p.ssafy.io
#  port: 8085
#
#  servlet:
#    session:
#      timeout: 30m

---
# 프로파일 dev-blue 설정
spring:
  config:
    activate:
      on-profile: blue

server:
  port: 8080  # blue 인스턴스의 포트

---
# 프로파일 dev-green 설정
spring:
  config:
    activate:
      on-profile: green

server:
  port: 8081  # green 인스턴스의 포트

management:
  endpoints:
    web:
      exposure:
        include: health,info  # 헬스체크와 정보 엔드포인트를 노출
  endpoint:
    health:
      show-details: always     # health 엔드포인트에서 세부 정보 표시

